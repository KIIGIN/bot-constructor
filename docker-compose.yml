services:
  postgres:
    image: postgres:16.3-alpine
    container_name: postgres
    env_file: .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - ./.docker/postgres:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - botnet

  minio:
    image: minio/minio
    container_name: minio
    env_file: .env
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./.docker/minio:/data
    command: [ "server", "/data", "--console-address", ":9001" ]
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped
    networks:
      - botnet

  redis:
    image: redis:7.4-alpine
    container_name: redis
    env_file: .env
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - ./.docker/redis:/data
    command: [ "redis-server", "--requirepass", "${REDIS_PASSWORD}" ]
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - botnet

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    env_file: .env
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - botnet

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=${VITE_API_URL}
    container_name: frontend
    env_file: .env
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_started
    networks:
      - botnet

networks:
  botnet:
    driver: bridge